// <auto-generated />
using System;
using EventsWebApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsWebApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241007234946_Initil7")]
    partial class Initil7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventsWebApp.Domain.Models.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SocialEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SocialEventId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc46dfad-3f56-4720-86d3-de1338a52793"),
                            DateOfBirth = new DateTime(1960, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2024, 10, 8, 2, 49, 46, 542, DateTimeKind.Local).AddTicks(5227),
                            Email = "example@gmail.com",
                            Name = "Peter",
                            SocialEventId = new Guid("7487e5ce-418b-4f53-a62b-86c47ccd0d9a"),
                            Surname = "Parker",
                            UserId = new Guid("71252927-119c-4cb2-8722-facff9e493d5")
                        },
                        new
                        {
                            Id = new Guid("81efed88-0d98-4d30-825d-8d58fb85ac72"),
                            DateOfBirth = new DateTime(1980, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2024, 10, 8, 2, 49, 46, 542, DateTimeKind.Local).AddTicks(5250),
                            Email = "great@gmail.com",
                            Name = "Bruce",
                            SocialEventId = new Guid("78943cc5-b0f5-49cb-92b7-a1e07d99eb2c"),
                            Surname = "Banner",
                            UserId = new Guid("879acf08-83f9-44d7-8447-eaa203dc8ff8")
                        },
                        new
                        {
                            Id = new Guid("c65e796f-5133-49a0-b519-52382a27e868"),
                            DateOfBirth = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2024, 10, 8, 2, 49, 46, 542, DateTimeKind.Local).AddTicks(5256),
                            Email = "great@gmail.com",
                            Name = "Clark",
                            SocialEventId = new Guid("242c723e-fc49-43ef-9dd4-4a82a6457770"),
                            Surname = "Kent",
                            UserId = new Guid("11a368e8-3acf-4b8f-a82a-a2e6841ee4c1")
                        });
                });

            modelBuilder.Entity("EventsWebApp.Domain.Models.SocialEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAttendee")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SocialEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7487e5ce-418b-4f53-a62b-86c47ccd0d9a"),
                            Category = 6,
                            Date = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A fun-filled trivia night where teams compete to answer questions across various categories. Great prizes await the winners!",
                            EventName = "Trivia Night Extravaganza",
                            Image = "images\\dc7ea763-8d70-43d5-bf36-c05242b31029-изображение_2024-10-08_024226418.png",
                            MaxAttendee = 1,
                            Place = "Minsk"
                        },
                        new
                        {
                            Id = new Guid("78943cc5-b0f5-49cb-92b7-a1e07d99eb2c"),
                            Category = 2,
                            Date = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A comprehensive conference focused on the latest trends and techniques in digital marketing, featuring expert speakers and interactive sessions.",
                            EventName = "Marketing Strategies Conference",
                            Image = "images\\af73310b-bd4a-4731-a052-5c19865f4c7a-изображение_2024-10-08_023853621.png",
                            MaxAttendee = 2,
                            Place = "Gomel"
                        },
                        new
                        {
                            Id = new Guid("242c723e-fc49-43ef-9dd4-4a82a6457770"),
                            Category = 3,
                            Date = new DateTime(2025, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An exciting convention showcasing the latest technology and innovations. Meet industry leaders, attend panel discussions, and explore cutting-edge products.",
                            EventName = "Tech Innovations Convention",
                            Image = "images\\2c3a971f-0bfc-4dda-9675-ed75d7d07db5-изображение_2024-10-08_024255264.png",
                            MaxAttendee = 20,
                            Place = "Gomel"
                        },
                        new
                        {
                            Id = new Guid("5e2d9347-8a95-49d2-b58b-28adeeb0d21e"),
                            Category = 5,
                            Date = new DateTime(2025, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An interactive Q&A session with financial experts who will provide insights on personal finance management, investment strategies, and wealth building.",
                            EventName = "Financial Freedom Q&A Session",
                            Image = "images\\fcefd765-202c-433b-b98c-b03065d019a5-изображение_2024-10-08_024038630.png",
                            MaxAttendee = 50,
                            Place = "Polotsk"
                        },
                        new
                        {
                            Id = new Guid("fd600952-f8e6-4a73-a346-9a70ac0fbabe"),
                            Category = 4,
                            Date = new DateTime(2025, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lecture by a renowned art historian covering the evolution and impact of modern art movements in the 20th and 21st centuries.",
                            EventName = "Modern Art Lecture",
                            Image = "images\\be1df92e-4250-4ce7-8d3e-b82b1a3ea6fe-изображение_2024-10-08_024330991.png",
                            MaxAttendee = 20,
                            Place = "Mogilev"
                        },
                        new
                        {
                            Id = new Guid("3582f285-5166-451d-be8b-3d151f61c07b"),
                            Category = 1,
                            Date = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A masterclass led by a successful entrepreneur, sharing insights on how to start and grow a business, including tips on funding, marketing, and scaling.",
                            EventName = "Entrepreneurship MasterClass",
                            Image = "images\\4b4fd120-0fce-49ef-b9fb-178c5eba4f72-изображение_2024-10-08_024111696.png",
                            MaxAttendee = 55,
                            Place = "Vitebsk"
                        },
                        new
                        {
                            Id = new Guid("aa3a61ec-8f2f-4bec-a7d9-380bf68cb047"),
                            Category = 2,
                            Date = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A conference discussing the impact of climate change, featuring experts from environmental science, policy-making, and sustainable practices.",
                            EventName = "Climate Change Conference",
                            Image = "images\\d57d7aba-fa51-48f8-bc13-8a250489e219-изображение_2024-10-08_024142528.png",
                            MaxAttendee = 100,
                            Place = "Brest"
                        },
                        new
                        {
                            Id = new Guid("7436896f-e363-4890-a67d-d151a498c0f4"),
                            Category = 4,
                            Date = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lecture by a health expert on holistic wellness practices, covering topics like nutrition, mental health, and exercise for a balanced lifestyle.",
                            EventName = "Health & Wellness Lecture",
                            Image = "images\\e4343661-d697-49ed-bf9c-cb10a4ec7cf4-изображение_2024-10-08_023959172.png",
                            MaxAttendee = 10,
                            Place = "Grodno"
                        },
                        new
                        {
                            Id = new Guid("58295261-1669-4981-977d-7e15440efa52"),
                            Category = 1,
                            Date = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A hands-on masterclass with a professional photographer, focusing on advanced techniques in portrait and landscape photography.",
                            EventName = "Photography MasterClass",
                            Image = "images\\ac7044ab-c598-42c0-8624-e5a8f157624b-изображение_2024-10-08_024317048.png",
                            MaxAttendee = 30,
                            Place = "Minsk"
                        },
                        new
                        {
                            Id = new Guid("b2111853-c49d-4606-adb6-1e029ebb304d"),
                            Category = 3,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A convention designed for professionals looking to enhance their leadership skills, featuring workshops, panel discussions, and keynote speeches by industry leaders.",
                            EventName = "Leadership Development Convention",
                            Image = "images\\2f85a33e-04a7-42c9-9974-67b033c66d6f-изображение_2024-10-08_023935489.png",
                            MaxAttendee = 50,
                            Place = "Minsk"
                        },
                        new
                        {
                            Id = new Guid("097c029b-53c9-460d-9b7f-e1978a42ef78"),
                            Category = 6,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A high-energy, outdoor fitness session led by a professional trainer. Suitable for all fitness levels.",
                            EventName = "Fitness Boot Camp",
                            Image = "images\\2006cffb-cd31-4fc8-ad90-1e20452dc255-изображение_2024-10-08_024022180.png",
                            MaxAttendee = 11,
                            Place = "Polotsk"
                        },
                        new
                        {
                            Id = new Guid("7c3eff58-b71b-4e32-86e6-8a5255f2e4c8"),
                            Category = 6,
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A monthly book club meeting to discuss the chosen book. Enjoy lively discussions, snacks, and a chance to meet fellow book enthusiasts",
                            EventName = "Book Club Gathering",
                            Image = "images\\0dcc6bce-65ee-4555-8495-5b9b8f7e8fc0-изображение_2024-10-08_024204332.png",
                            MaxAttendee = 10,
                            Place = "Vitebsk"
                        });
                });

            modelBuilder.Entity("EventsWebApp.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiresRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71252927-119c-4cb2-8722-facff9e493d5"),
                            Email = "example@gmail.com",
                            PasswordHash = "$2a$11$9G6W9TMbak.tEln.2UZs.eV7wijqdbsfGi0bxQXbTvHATlNxvplBW",
                            RefreshToken = "",
                            Role = "User",
                            Username = "Jake"
                        },
                        new
                        {
                            Id = new Guid("879acf08-83f9-44d7-8447-eaa203dc8ff8"),
                            Email = "admin@gmail.com",
                            PasswordHash = "$2a$11$JIQLxNwlInQ0HUvMbQQsDOKY5jbdfWXPmkZeH6iH5uZ/WUiKPea4m",
                            RefreshToken = "",
                            Role = "Admin",
                            Username = "Mark"
                        },
                        new
                        {
                            Id = new Guid("11a368e8-3acf-4b8f-a82a-a2e6841ee4c1"),
                            Email = "great@gmail.com",
                            PasswordHash = "$2a$11$PWLX6tR4Eq8pw657iF8eAep19WYQ5S4qXBzPGuZV62pwBSN.TRDtW",
                            RefreshToken = "",
                            Role = "User",
                            Username = "Victor"
                        });
                });

            modelBuilder.Entity("EventsWebApp.Domain.Models.Attendee", b =>
                {
                    b.HasOne("EventsWebApp.Domain.Models.SocialEvent", "SocialEvent")
                        .WithMany("ListOfAttendees")
                        .HasForeignKey("SocialEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsWebApp.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsWebApp.Domain.Models.SocialEvent", b =>
                {
                    b.Navigation("ListOfAttendees");
                });
#pragma warning restore 612, 618
        }
    }
}
